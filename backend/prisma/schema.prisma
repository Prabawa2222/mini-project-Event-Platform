generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  role           UserRole        @default(CUSTOMER)
  referralCode   String          @unique
  referredBy     String?
  points         Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  profilePicture String?
  coupons        Coupon[]
  events         Event[]         @relation("EventOrganizers")
  pointsHistory  PointsHistory[]
  reviews        Review[]
  transactions   Transaction[]
  referrer       User?           @relation("UserReferrals", fields: [referredBy], references: [referralCode])
  referrals      User[]          @relation("UserReferrals")
}

model PointsHistory {
  id        Int        @id @default(autoincrement())
  userId    Int
  points    Int
  type      PointsType
  expiresAt DateTime
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
}

model Coupon {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  discount    Int
  expiresAt   DateTime
  userId      Int
  createdAt   DateTime     @default(now())
  isUsed      Boolean      @default(false)
  type        CouponType
  usedAt      DateTime?
  user        User         @relation(fields: [userId], references: [id])
  transaction Transaction?
}

model Event {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  price          Int
  startDate      DateTime
  endDate        DateTime
  availableSeats Int
  organizerId    Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  category       String
  location       String
  slug           String        @unique
  deletedAt      DateTime?
  organizer      User          @relation("EventOrganizers", fields: [organizerId], references: [id])
  promotions     Promotion[]
  reviews        Review[]
  ticketTypes    TicketType[]
  transactions   Transaction[]
}

model TicketType {
  id           Int           @id @default(autoincrement())
  eventId      Int
  name         String
  price        Int
  quantity     Int
  description  String?
  event        Event         @relation(fields: [eventId], references: [id])
  transactions Transaction[]
}

model Promotion {
  id           Int           @id @default(autoincrement())
  eventId      Int
  discount     Int
  startDate    DateTime
  endDate      DateTime
  code         String        @unique
  currentUses  Int           @default(0)
  maxUses      Int?
  event        Event         @relation(fields: [eventId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id            Int               @id @default(autoincrement())
  userId        Int
  eventId       Int
  status        TransactionStatus
  paymentProof  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  adminActionBy DateTime?
  couponId      Int?              @unique
  expiresAt     DateTime
  pointsUsed    Int               @default(0)
  promotionId   Int?
  quantity      Int
  ticketTypeId  Int
  totalPrice    Int
  coupon        Coupon?           @relation(fields: [couponId], references: [id])
  event         Event             @relation(fields: [eventId], references: [id])
  promotion     Promotion?        @relation(fields: [promotionId], references: [id])
  ticketType    TicketType        @relation(fields: [ticketTypeId], references: [id])
  user          User              @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  CUSTOMER
  ORGANIZER
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum PointsType {
  REFERRAL
  USED
  EXPIRED
}

enum CouponType {
  REFERRAL
  REWARD
}
